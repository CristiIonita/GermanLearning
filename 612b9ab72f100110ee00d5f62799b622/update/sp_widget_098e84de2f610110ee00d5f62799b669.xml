<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[
api.controller = function attachMate($scope, nowAttachmentHandler, $rootScope, spUtil, spModal, $log, spAriaUtil,$document) {
var c = this;
	c.data.sys = "";
//	var options = {} ;
//	var id = "";
	 $scope.$watch(function() {
        return $scope.page.g_form.getValue('select_record');
    }, function(value) {
	
	console.info($scope.page.g_form.getValue('select_record'))
 
		c.data.sys = $scope.page.g_form.getValue('select_record');
c.server.update();
		 //attachMate();
	
		 //$scope.page.g_form.getValue('Attr1',new Valuevalue);
		 
		 
		
});
console.log("am ajuns aici");
	$scope.errorMessages = [];
	$scope.attachmentHandler = new nowAttachmentHandler(setAttachments, appendError);
	$scope.data.action = "";
	var isReadonlyMode = $scope.data.read_only;
	spUtil.recordWatch($scope, "sys_attachment", "table_sys_id=" + $scope.data.sys_id, function(response, data) {
		$scope.attachmentHandler.getAttachmentList();
		if (response.data) {
			var options = {};
			options.operation = response.data.operation;
			options.filename = response.data.display_value;
			options.sys_id = $scope.data.sys_id;
			options.table = $scope.data.table; 
			options.state = (response.data.record && response.data.record.state) ? response.data.record.state.value : "";
			//broadcast only if operation is update...we don't need insert and other record updates for now
			if (options.operation === "update" && options.state === "not_available")
			$rootScope.$broadcast("attachment.updated",options);
		}
	});

	$scope.$evalAsync(function() {
		$scope.attachmentHandler.setParams($scope.data.table, $scope.data.sys_id, 1024 * 1024 * $scope.data.maxAttachmentSize);
		$scope.attachmentHandler.getAttachmentList();
	});

	$scope.hasAttachments = function() {
		return $scope.attachments && $scope.attachments.length != 0;
	};

	$scope.canWrite = function() {
		return $scope.data.canWrite;
	};

	$scope.dropFiles = function(files) {
		if (!$scope.data.canDragAndDrop) {
			spUtil.addInfoMessage(data.noDragDropMsg);
			return;
		}
		$scope.attachmentHandler.onFileSelect(files);
	}
	$scope.confirmDeleteAttachment = function(attachment) {
		var appendTo = $scope.data.appendToId ? $document.find('#'+$scope.data.appendToId) : null;
		spModal.confirm("${Delete Attachment?}",  appendTo).then(function() {
				$scope.attachmentHandler.deleteAttachment(attachment);
		});
	};
	$scope.$on('dialog.upload_too_large.show', function(e){
		$log.error($scope.data.largeAttachmentMsg);
		spUtil.addErrorMessage($scope.data.largeAttachmentMsg);
	});

	$scope.$on('added_attachment', function(evt) {
		$scope.data.action = "added";
		spUtil.update($scope);
	});
	
	$scope.$on('sn.attachment.scanned', function(evt) {
		$scope.attachmentHandler.getAttachmentList("list");
	});
	
	$scope.$on('sp.record.can_write', function(evt, answer) {
		$scope.data.canWrite = answer;
	});

	function appendError(error) {
		$scope.errorMessages.push(error);
		spUtil.addErrorMessage(error.msg + error.fileName);
		spAriaUtil.sendLiveMessage(error.msg);
	}

	function setAttachments(attachments, action) {
		if ($scope.submitting == true)
			return;
		
		if (isReadonlyMode) {
			attachments.forEach(function(attachment) {
				attachment.canDelete = false;
				attachment.canWrite = false;
			});
		}
		
		$scope.attachments = attachments;
		if (!action)
			return;
		
		if (action === "added") {
			spAriaUtil.sendLiveMessage($scope.data.attachmentSuccessMsg);
		}
		if (action === "renamed") {
			spAriaUtil.sendLiveMessage($scope.data.renameSuccessMsg);
		}
		if (action === "deleted") {
			spAriaUtil.sendLiveMessage($scope.data.deleteSuccessMsg);
		}
		
		$scope.data.action = action;
		spUtil.update($scope);
	} 

};]]></client_script>
        <controller_as>c</controller_as>
        <css>.sp-drop-area {
  display: block;
  padding: 30px;
  width: 100%;
  border: 1px dashed $panel-default-border;
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>goodclone2</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>GoodClone2</name>
        <option_schema>[{"hint":"ID of referenced record","name":"record_id","section":"Data","default_value":"","label":"Record ID","type":"string"},{"hint":"Table name of referenced record","name":"record_table","section":"Data","default_value":"x_723119_germanlrn_resource","label":"Record Table","type":"string"}]</option_schema>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
//	if(input && input.id){
	
	
	 data.sys_id = '03b8323b2fb84110ee00d5f62799b6b3';
	if(input && input.sys){
		
	
	data.sys_id = input.sys;
}

	data.table = options.record_table || $sp.getParameter("table");
	data.read_only = options.read_only || false;
	data.appendToId = options.appendToId;
	data.maxAttachmentSize = parseInt(gs.getProperty("com.glide.attachment.max_size", 1024));
	if (isNaN(data.maxAttachmentSize))
		data.maxAttachmentSize = 24;
	data.largeAttachmentMsg = gs.getMessage("Attached files must be smaller than {0} MB - please try again", data.maxAttachmentSize);
	data.attachmentSuccessMsg = gs.getMessage("Attachment successfully uploaded");
	data.noDragDropMsg = gs.getMessage("Attachment drap-and-drop not enabled - use attachment button");
	data.noAttachmentsMsg = gs.getMessage("There are no attachments");
	data.renameSuccessMsg = gs.getMessage("Attachment renamed successfully");
	data.deleteSuccessMsg = gs.getMessage("Attachment deleted successfully");
//	if (!data.table || !data.sys_id)
//		return;

	var gr = sn_std_tkt_api.TicketConfig.getTicketRecord(data.table, data.sys_id);
	
	if (gr == null)
		return;

	if (input && input.action == "deleted") {
		gr.comments = input.action + " an attachment";
		gr.update();
	}

	data.canWrite = gr.canWrite() && !data.read_only;
	data.canAttach = gs.hasRole(gs.getProperty("glide.attachment.role")) && gr.getAttribute("no_attachment") != "true" && !data.read_only;
	data.canRead = gr.canRead();
	data.canDragAndDrop = gs.getProperty('glide.ui.attachment_drag_and_drop', 'true') === 'true' && !data.read_only;
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-02-10 10:07:00</sys_created_on>
        <sys_id>098e84de2f610110ee00d5f62799b669</sys_id>
        <sys_mod_count>99</sys_mod_count>
        <sys_name>GoodClone2</sys_name>
        <sys_package display_value="German Learning" source="x_723119_germanlrn">612b9ab72f100110ee00d5f62799b622</sys_package>
        <sys_policy/>
        <sys_scope display_value="German Learning">612b9ab72f100110ee00d5f62799b622</sys_scope>
        <sys_update_name>sp_widget_098e84de2f610110ee00d5f62799b669</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-02-10 15:21:48</sys_updated_on>
        <template><![CDATA[<div ng-if="data.canRead" class="panel panel-{{options.color}} b">
  <div class="panel-heading padder-b-none">
    <div ng-if="::(data.canWrite && data.canAttach && !data.read_only)">
      <sp-attachment-button></sp-attachment-button>
    </div>
    <div class="clearfix"></div>
  </div>

  <!-- small device - hide body unless there are attachments -->
  <div class="panel-body" ng-class="{'hidden-xs': !hasAttachments()}">
    <div ng-if="data.canWrite && data.canAttach" ng-file-drop="dropFiles($files)" ng-multiple="true" class="sp-attachments">
      <div ng-if="::data.canDragAndDrop" class="sp-no-attachments text-center text-italic text-muted" ng-show="!hasAttachments()">
        <em class="sp-drop-area">${Drop files here}</em>
      </div>
      <div ng-if="::!data.canDragAndDrop" class="sp-no-attachments text-center text-muted" ng-show="!hasAttachments()">
        <em>{{::data.noAttachmentsMsg}}</em>
      </div>
      <now-attachments-list template="sp_attachment"></now-attachments-list>
    </div>

    <div ng-if="!data.canWrite || !data.canAttach" class="sp-attachments">
      <div class="sp-no-attachments text-center text-muted" ng-show="!hasAttachments()">
        <em>{{::data.noAttachmentsMsg}}</em>
      </div>
      <now-attachments-list template="sp_attachment"></now-attachments-list>
    </div>
  </div>

  <!-- no attachments msg at phone size when can't write -->
  <div class="panel-body visible-xs-block" ng-if="!hasAttachments() && (!data.canWrite || !data.canAttach)">
    <div class="sp-no-attachments text-center text-muted">
      <em>{{::data.noAttachmentsMsg}}</em>
    </div>
  </div>
</div>]]></template>
    </sp_widget>
</record_update>
