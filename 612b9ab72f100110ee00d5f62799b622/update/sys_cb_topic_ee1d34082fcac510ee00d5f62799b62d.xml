<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_cb_topic">
    <sys_cb_topic action="INSERT_OR_UPDATE">
        <applicability/>
        <applicability_mode>query</applicability_mode>
        <autopilot_topic>false</autopilot_topic>
        <category/>
        <channels/>
        <connect_queue/>
        <description/>
        <expose_on_palette>false</expose_on_palette>
        <flexible_conversation_switching>false</flexible_conversation_switching>
        <graph>{
  "graph_api_version": "1.0.36",
  "goals": {
    "primary": {
      "id": "primary",
      "trigger": {
        "type": "primary"
      },
      "name": "primary",
      "applicability": "",
      "description": "",
      "nodes": {
        "4bc63d85a51345ff90694f9508ea2e1e": {
          "id": "4bc63d85a51345ff90694f9508ea2e1e",
          "stepType": "Start",
          "name": "Start",
          "greetingResponse": {
            "value": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "text": "Welcome "
                  },
                  {
                    "type": "datapill",
                    "dataPill": {
                      "value": "{{vaInputs.user.first_name}}",
                      "displayValue": "Input Variables➛User➛First name"
                    },
                    "children": [
                      {
                        "text": ""
                      }
                    ]
                  },
                  {
                    "text": ""
                  }
                ]
              }
            ],
            "mode": "simple"
          }
        },
        "a8dd3be7d00446d2bf056fb31d62ec72": {
          "id": "a8dd3be7d00446d2bf056fb31d62ec72",
          "stepType": "TerminateGoal",
          "name": "End",
          "confirmationMessage": {
            "value": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "text": "Thank you for Using Virtual Agent "
                  }
                ]
              }
            ],
            "mode": "simple"
          }
        },
        "c0619db46d094b089a97c8423546f687": {
          "stepType": "ReferenceChoicePrompt",
          "name": "Choose Record",
          "prompt": {
            "value": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "text": "Pick a project"
                  }
                ]
              }
            ],
            "mode": "simple"
          },
          "confirmMessage": {
            "value": "",
            "mode": "simple"
          },
          "acknowledgeMsg": {
            "value": "",
            "mode": "simple"
          },
          "applicability": {
            "value": "",
            "mode": "query"
          },
          "skippable": {
            "value": "",
            "mode": "query"
          },
          "defaultValue": {
            "value": "",
            "mode": "simple"
          },
          "variableId": "e2cb931469b341ce8068f421270a6540",
          "id": "c0619db46d094b089a97c8423546f687",
          "mode": "glide_record",
          "script": "",
          "metadataScript": "",
          "cardData": {},
          "noRecordsResponseMsg": {
            "value": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "text": "No Record Found"
                  }
                ]
              }
            ],
            "mode": "simple"
          },
          "condition": {
            "mode": "glide_scripted_query",
            "value": "(function execute(table) {\n    /* Code your glide record query logic here. For example:\n\n        var options = [];\n        var gr = new GlideRecordSecure(table);\n        gr.addEncodedQuery('active=true^numberSTARTSWITHINC001001');\n        gr.setLimit(10);\n        gr.query();\n        while(gr.next()) {\n            options.push({ 'value': gr.getUniqueValue(), 'label': gr.getValue('short_description') });\n        }\n        return options;\n    */\n\n    var options = []; // add options here...\n    var gr = new GlideRecordSecure(table);\n    gr.addEncodedQuery('nameLIKE'+ vaInputs.enter_project_name );\n    gr.query();\n    while(gr.next()){\n        options.push({ 'value' : gr.getUniqueValue(), 'label': gr.getValue('name')});\n    }\n    return options;\n})(table)\n"
          },
          "hasCardHeader": false,
          "cardMetadata": {
            "mode": "card",
            "metadataScript": "",
            "cardTemplate": "",
            "cardFields": {},
            "cardDefinition": {}
          },
          "withNluUserInput": false,
          "skipIfFulfilled": false
        },
        "a097da6b755e4304900f49c2b5c7ec53": {
          "stepType": "ReferenceChoicePrompt",
          "name": "Additional Action",
          "prompt": {
            "value": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "text": "What information you need about this Record ?"
                  }
                ]
              }
            ],
            "mode": "simple"
          },
          "confirmMessage": {
            "value": "",
            "mode": "simple"
          },
          "acknowledgeMsg": {
            "value": "",
            "mode": "simple"
          },
          "applicability": {
            "value": "",
            "mode": "query"
          },
          "skippable": {
            "value": "",
            "mode": "query"
          },
          "defaultValue": {
            "value": "",
            "mode": "simple"
          },
          "variableId": "f7b0aae8adbe460680cdc0d1256eed7b",
          "id": "a097da6b755e4304900f49c2b5c7ec53",
          "mode": "external",
          "script": "(function execute() {\n    /* Code your script logic here. For example, you might want to call an external web service\n       to find the best local Italian restaurants.  Call a Restaurants Web Service then use the results\n       to populate an options array.\n\n        var options = [];\n        options.push({ 'value': 'best_italian_1', 'label': gs.getMessageLang(\"Best Italian Restaurant Ever\", vaContext.getRequesterLang()), 'render_style': 'data' });\n        options.push({ 'value': 'best_italian_2', 'label': gs.getMessageLang(\"Even Better Italian Restaurant\", vaContext.getRequesterLang()), 'render_style': 'data' });\n        return options;\n    */\n\n    var options = []; // add options here...\n     options.push({ 'value': '2', 'label': gs.getMessage('Get costs') });\n    options.push({ 'value': '3', 'label': gs.getMessage('Get estimated costs') });\n    options.push({ 'value': '0', 'label': gs.getMessage('Cancel') });\n    return options;\n})()\n",
          "metadataScript": "",
          "cardData": {},
          "noRecordsResponseMsg": {
            "value": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "text": "No additional actions found"
                  }
                ]
              }
            ],
            "mode": "simple"
          },
          "condition": {
            "value": "(function execute() {\n    /* Code your script logic here. For example, you might want to call an external web service\n       to find the best local Italian restaurants.  Call a Restaurants Web Service then use the results\n       to populate an options array.\n\n        var options = [];\n        options.push({ 'value': 'best_italian_1', 'label': gs.getMessageLang(\"Best Italian Restaurant Ever\", vaContext.getRequesterLang()), 'render_style': 'data' });\n        options.push({ 'value': 'best_italian_2', 'label': gs.getMessageLang(\"Even Better Italian Restaurant\", vaContext.getRequesterLang()), 'render_style': 'data' });\n        return options;\n    */\n\n    var options = []; // add options here...\n     options.push({ 'value': '2', 'label': gs.getMessage('Get costs') });\n    options.push({ 'value': '3', 'label': gs.getMessage('Get estimated costs') });\n    options.push({ 'value': '0', 'label': gs.getMessage('Cancel') });\n    return options;\n})()\n",
            "mode": "external_script"
          },
          "hasCardHeader": false,
          "cardMetadata": {
            "mode": "card",
            "metadataScript": "",
            "cardTemplate": "",
            "cardFields": {},
            "cardDefinition": {}
          },
          "withNluUserInput": false,
          "skipIfFulfilled": false
        },
        "3355fb39da004cd282ef8f3b519058c0": {
          "id": "3355fb39da004cd282ef8f3b519058c0",
          "stepType": "Decision",
          "name": "Decision"
        },
        "c6431f1545164cd0960a4a0ba007820a": {
          "id": "c6431f1545164cd0960a4a0ba007820a",
          "stepType": "TextOutput",
          "name": "Display costs",
          "secure": false,
          "value": {
            "value": "(function execute() {\n    /* Return a quoted string.  For example:\n\n       if (vaInputs.first_name == 'Bill') {\n           return gs.getMessageLang(\"hi there {0}\", vaContext.getRequesterLang(), [vaInputs.first_name]);\n       } else {\n           return gs.getMessageLang(\"how are you {0}\", vaContext.getRequesterLang(), [vaInputs.last_name]);\n       }\n    */\n    var gr = new GlideRecord('x_723119_germanlrn_project');\n    if(vaInputs.search_browse == \"1\"){\n  gr.addQuery('sys_id',vaInputs.choose_record.getValue());\n    }\n  else{\n        gr.addQuery('sys_id',vaInputs.browse_projects.getValue());\n  }\n    gr.query();\n    if(gr.next()){\n        var test = gr.getDisplayValue('costs');\n        return gs.getMessageLang(\"Costs for this project are : \" + test);\n    }\n})()\n",
            "mode": "script"
          },
          "applicability": {
            "value": "",
            "mode": "query"
          }
        },
        "9fc30225df834ac3bed70d82daef03a0": {
          "id": "9fc30225df834ac3bed70d82daef03a0",
          "stepType": "TextOutput",
          "name": "Display estimated costs",
          "secure": false,
          "value": {
            "value": "(function execute() {\n    /* Return a quoted string.  For example:\n\n       if (vaInputs.first_name == 'Bill') {\n           return gs.getMessageLang(\"hi there {0}\", vaContext.getRequesterLang(), [vaInputs.first_name]);\n       } else {\n           return gs.getMessageLang(\"how are you {0}\", vaContext.getRequesterLang(), [vaInputs.last_name]);\n       }\n    */\n    var gr = new GlideRecord('x_723119_germanlrn_project');\n    if(vaInputs.search_browse == \"1\"){\n gr.addQuery('sys_id',vaInputs.choose_record.getValue());\n    }\n   else{\n       gr.addQuery('sys_id',vaInputs.browse_projects.getValue());\n   }\n    gr.query();\n    if(gr.next()){\n        var test = gr.getDisplayValue('estimated_costs');\n        return gs.getMessageLang(\"Estimated costs for this project are : \" + test);\n    }\n})()\n",
            "mode": "script"
          },
          "applicability": {
            "value": "",
            "mode": "query"
          }
        },
        "0d7d6c9fbf414b099006e6213b07520e": {
          "stepType": "ReferenceChoicePrompt",
          "name": "Other Projects",
          "prompt": {
            "value": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "text": "Do you want to view another project?"
                  }
                ]
              }
            ],
            "mode": "simple"
          },
          "confirmMessage": {
            "value": "",
            "mode": "simple"
          },
          "acknowledgeMsg": {
            "value": "",
            "mode": "simple"
          },
          "applicability": {
            "value": "",
            "mode": "query"
          },
          "skippable": {
            "value": "",
            "mode": "query"
          },
          "defaultValue": {
            "value": "",
            "mode": "simple"
          },
          "variableId": "984d34d4220f4e048e4dd1dff6c80201",
          "id": "0d7d6c9fbf414b099006e6213b07520e",
          "mode": "external",
          "script": "(function execute() {\n    /* Code your script logic here. For example, you might want to call an external web service\n       to find the best local Italian restaurants.  Call a Restaurants Web Service then use the results\n       to populate an options array.\n\n        var options = [];\n        options.push({ 'value': 'best_italian_1', 'label': gs.getMessageLang(\"Best Italian Restaurant Ever\", vaContext.getRequesterLang()), 'render_style': 'data' });\n        options.push({ 'value': 'best_italian_2', 'label': gs.getMessageLang(\"Even Better Italian Restaurant\", vaContext.getRequesterLang()), 'render_style': 'data' });\n        return options;\n    */\n     var options = [];\n options.push({ 'value': '2', 'label': gs.getMessage('Choose another project') });\n    options.push({ 'value': '0', 'label': gs.getMessage(\"That's it for now\") });\n    // add options here...\n    return options;\n})()\n",
          "metadataScript": "",
          "cardData": {},
          "noRecordsResponseMsg": {
            "value": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "text": "No selection chosen"
                  }
                ]
              }
            ],
            "mode": "simple"
          },
          "condition": {
            "value": "(function execute() {\n    /* Code your script logic here. For example, you might want to call an external web service\n       to find the best local Italian restaurants.  Call a Restaurants Web Service then use the results\n       to populate an options array.\n\n        var options = [];\n        options.push({ 'value': 'best_italian_1', 'label': gs.getMessageLang(\"Best Italian Restaurant Ever\", vaContext.getRequesterLang()), 'render_style': 'data' });\n        options.push({ 'value': 'best_italian_2', 'label': gs.getMessageLang(\"Even Better Italian Restaurant\", vaContext.getRequesterLang()), 'render_style': 'data' });\n        return options;\n    */\n     var options = [];\n options.push({ 'value': '2', 'label': gs.getMessage('Choose another project') });\n    options.push({ 'value': '0', 'label': gs.getMessage(\"That's it for now\") });\n    // add options here...\n    return options;\n})()\n",
            "mode": "external_script"
          },
          "hasCardHeader": false,
          "cardMetadata": {
            "mode": "card",
            "metadataScript": "",
            "cardTemplate": "",
            "cardFields": {},
            "cardDefinition": {}
          },
          "withNluUserInput": false,
          "skipIfFulfilled": false
        },
        "e6aa249e4be846a1b3d35fe6c01c6e52": {
          "id": "e6aa249e4be846a1b3d35fe6c01c6e52",
          "stepType": "Decision",
          "name": "Decision"
        },
        "7c9a5fd1646b42798bf2ad37390366f6": {
          "id": "7c9a5fd1646b42798bf2ad37390366f6",
          "stepType": "Prompt",
          "name": "Enter Project Name",
          "prompt": {
            "value": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "text": "Search project by name"
                  }
                ]
              }
            ],
            "mode": "simple"
          },
          "confirmMessage": {
            "value": "",
            "mode": "simple"
          },
          "acknowledgeMsg": {
            "value": "",
            "mode": "simple"
          },
          "applicability": {
            "value": "",
            "mode": "query"
          },
          "skippable": {
            "value": "",
            "mode": "query"
          },
          "defaultValue": {
            "value": "",
            "mode": "simple"
          },
          "withNluUserInput": false,
          "skipIfFulfilled": false,
          "variableId": "f1802bf9ddb040f2b7e9bf473ba2bb9f",
          "inputType": {
            "format": "Text",
            "script": ""
          }
        },
        "63c67ec397d745e1a8e2172861bb51bd": {
          "stepType": "ReferenceChoicePrompt",
          "name": "Search/browse",
          "prompt": {
            "value": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "text": "Search project by name or browse through all projects"
                  }
                ]
              }
            ],
            "mode": "simple"
          },
          "confirmMessage": {
            "value": "",
            "mode": "simple"
          },
          "acknowledgeMsg": {
            "value": "",
            "mode": "simple"
          },
          "applicability": {
            "value": "",
            "mode": "query"
          },
          "skippable": {
            "value": "",
            "mode": "query"
          },
          "defaultValue": {
            "value": "",
            "mode": "simple"
          },
          "variableId": "fc887997333b4535900754d857192ca7",
          "id": "63c67ec397d745e1a8e2172861bb51bd",
          "mode": "external",
          "script": "(function execute() {\n    /* Code your script logic here. For example, you might want to call an external web service\n       to find the best local Italian restaurants.  Call a Restaurants Web Service then use the results\n       to populate an options array.\n\n        var options = [];\n        options.push({ 'value': 'best_italian_1', 'label': gs.getMessageLang(\"Best Italian Restaurant Ever\", vaContext.getRequesterLang()), 'render_style': 'data' });\n        options.push({ 'value': 'best_italian_2', 'label': gs.getMessageLang(\"Even Better Italian Restaurant\", vaContext.getRequesterLang()), 'render_style': 'data' });\n        return options;\n    */\n\n    var options = []; // add options here...\n     options.push({ 'value': '1', 'label': gs.getMessage('Search project by name') });\n\n    options.push({ 'value': '0', 'label': gs.getMessage('Browse all projects') });\n    return options;\n})()\n",
          "metadataScript": "",
          "cardData": {},
          "noRecordsResponseMsg": {
            "value": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "text": "No selection was made"
                  }
                ]
              }
            ],
            "mode": "simple"
          },
          "condition": {
            "value": "(function execute() {\n    /* Code your script logic here. For example, you might want to call an external web service\n       to find the best local Italian restaurants.  Call a Restaurants Web Service then use the results\n       to populate an options array.\n\n        var options = [];\n        options.push({ 'value': 'best_italian_1', 'label': gs.getMessageLang(\"Best Italian Restaurant Ever\", vaContext.getRequesterLang()), 'render_style': 'data' });\n        options.push({ 'value': 'best_italian_2', 'label': gs.getMessageLang(\"Even Better Italian Restaurant\", vaContext.getRequesterLang()), 'render_style': 'data' });\n        return options;\n    */\n\n    var options = []; // add options here...\n     options.push({ 'value': '1', 'label': gs.getMessage('Search project by name') });\n\n    options.push({ 'value': '0', 'label': gs.getMessage('Browse all projects') });\n    return options;\n})()\n",
            "mode": "external_script"
          },
          "hasCardHeader": false,
          "cardMetadata": {
            "mode": "card",
            "metadataScript": "",
            "cardTemplate": "",
            "cardFields": {},
            "cardDefinition": {}
          },
          "withNluUserInput": false,
          "skipIfFulfilled": false
        },
        "3c23e5722f2a4edcba4d6434be67affe": {
          "id": "3c23e5722f2a4edcba4d6434be67affe",
          "stepType": "Decision",
          "name": "Decision"
        },
        "676354b706ad4912ad78e82b62678e56": {
          "stepType": "ReferenceChoicePrompt",
          "name": "Browse Projects",
          "prompt": {
            "value": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "text": "Browse Projects"
                  }
                ]
              }
            ],
            "mode": "simple"
          },
          "confirmMessage": {
            "value": "",
            "mode": "simple"
          },
          "acknowledgeMsg": {
            "value": "",
            "mode": "simple"
          },
          "applicability": {
            "value": "",
            "mode": "query"
          },
          "skippable": {
            "value": "",
            "mode": "query"
          },
          "defaultValue": {
            "value": "",
            "mode": "simple"
          },
          "variableId": "af5e37f66011413eb997cb7b0e2d76e6",
          "id": "676354b706ad4912ad78e82b62678e56",
          "mode": "glide_record",
          "script": "",
          "metadataScript": "",
          "cardData": {},
          "noRecordsResponseMsg": {
            "value": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "text": "No record selected"
                  }
                ]
              }
            ],
            "mode": "simple"
          },
          "condition": {
            "mode": "glide_scripted_query",
            "value": "(function execute(table) {\n    /* Code your glide record query logic here. For example:\n\n        var options = [];\n        var gr = new GlideRecordSecure(table);\n        gr.addEncodedQuery('active=true^numberSTARTSWITHINC001001');\n        gr.setLimit(10);\n        gr.query();\n        while(gr.next()) {\n            options.push({ 'value': gr.getUniqueValue(), 'label': gr.getValue('short_description') });\n        }\n        return options;\n    */\n\n    var options = []; // add options here...\n    var gr = new GlideRecordSecure(table);\n    gr.query();\n    while(gr.next()){\n        options.push({ 'value': gr.getUniqueValue(), 'label': gr.getValue('name') });\n    }\n    return options;\n})(table)\n"
          },
          "hasCardHeader": false,
          "cardMetadata": {
            "mode": "card",
            "metadataScript": "",
            "cardTemplate": "",
            "cardFields": {},
            "cardDefinition": {}
          },
          "withNluUserInput": false,
          "skipIfFulfilled": false
        },
        "cf586bad18a646eeb0f0bbd0b95daa24": {
          "id": "cf586bad18a646eeb0f0bbd0b95daa24",
          "stepType": "Decision",
          "name": "Decision"
        }
      },
      "edges": [
        {
          "id": "27c876eb821645e89287936ff403d062",
          "edgeType": "Edge",
          "source": "7c9a5fd1646b42798bf2ad37390366f6",
          "target": "c0619db46d094b089a97c8423546f687",
          "sourcePort": "",
          "targetPort": ""
        },
        {
          "id": "88f5d1744495425589b122a5b92420e5",
          "edgeType": "Edge",
          "source": "c6431f1545164cd0960a4a0ba007820a",
          "target": "0d7d6c9fbf414b099006e6213b07520e",
          "sourcePort": "",
          "targetPort": ""
        },
        {
          "id": "fac734bac6f64137bf8932ea7c31810e",
          "edgeType": "Edge",
          "source": "a097da6b755e4304900f49c2b5c7ec53",
          "target": "3355fb39da004cd282ef8f3b519058c0",
          "sourcePort": "",
          "targetPort": ""
        },
        {
          "id": "96d92a10c31149508357a951383d463c",
          "edgeType": "Branch",
          "source": "3355fb39da004cd282ef8f3b519058c0",
          "target": "63c67ec397d745e1a8e2172861bb51bd",
          "sourcePort": "",
          "targetPort": "",
          "expression": {
            "mode": "script",
            "value": "(function execute() {\n    /* Return true or false to indicate the branch condition's applicability.\n       For example:\n\n       var applies = vaInputs.first_name == 'Bill' ? true : false;\n       return applies;\n    */\n    return vaInputs.additional_action == \"0\";\n    \n})()\n"
          },
          "label": "Cancel"
        },
        {
          "id": "03aaaa48696a404fb816b0bfbb3d7384",
          "edgeType": "Branch",
          "source": "3355fb39da004cd282ef8f3b519058c0",
          "target": "c6431f1545164cd0960a4a0ba007820a",
          "sourcePort": "",
          "targetPort": "",
          "expression": {
            "mode": "script",
            "value": "(function execute() {\n    /* Return true or false to indicate the branch condition's applicability.\n       For example:\n\n       var applies = vaInputs.first_name == 'Bill' ? true : false;\n       return applies;\n    */\n    return vaInputs.additional_action == \"2\";\n})()\n"
          },
          "label": "Get Costs"
        },
        {
          "id": "dfa7b1dbf8a14e14917e19f09602737e",
          "edgeType": "Branch",
          "source": "3355fb39da004cd282ef8f3b519058c0",
          "target": "9fc30225df834ac3bed70d82daef03a0",
          "sourcePort": "",
          "targetPort": "",
          "expression": {
            "mode": "script",
            "value": "(function execute() {\n    /* Return true or false to indicate the branch condition's applicability.\n       For example:\n\n       var applies = vaInputs.first_name == 'Bill' ? true : false;\n       return applies;\n    */\n    return vaInputs.additional_action == \"3\";\n})()\n"
          },
          "label": "Get Estimated Costs"
        },
        {
          "id": "af824c6cbaf24837af830451c6664892",
          "edgeType": "Edge",
          "source": "9fc30225df834ac3bed70d82daef03a0",
          "target": "0d7d6c9fbf414b099006e6213b07520e",
          "sourcePort": "",
          "targetPort": ""
        },
        {
          "id": "c319ac83e7cc4686b5026bfefeb548a3",
          "edgeType": "Edge",
          "source": "0d7d6c9fbf414b099006e6213b07520e",
          "target": "e6aa249e4be846a1b3d35fe6c01c6e52",
          "sourcePort": "",
          "targetPort": ""
        },
        {
          "id": "202b906fccda45019cbe0c33163e71bd",
          "edgeType": "Branch",
          "source": "e6aa249e4be846a1b3d35fe6c01c6e52",
          "target": "63c67ec397d745e1a8e2172861bb51bd",
          "sourcePort": "",
          "targetPort": "",
          "expression": {
            "mode": "script",
            "value": "(function execute() {\n    /* Return true or false to indicate the branch condition's applicability.\n       For example:\n\n       var applies = vaInputs.first_name == 'Bill' ? true : false;\n       return applies;\n    */\n    return vaInputs.other_projects == \"2\";\n})()\n"
          },
          "label": "View other project"
        },
        {
          "id": "6919f2543a9047d6b08fff40abc3ea88",
          "edgeType": "Branch",
          "source": "e6aa249e4be846a1b3d35fe6c01c6e52",
          "target": "a8dd3be7d00446d2bf056fb31d62ec72",
          "sourcePort": "",
          "targetPort": "",
          "expression": {
            "mode": "script",
            "value": "(function execute() {\n    /* Return true or false to indicate the branch condition's applicability.\n       For example:\n\n       var applies = vaInputs.first_name == 'Bill' ? true : false;\n       return applies;\n    */\n    return vaInputs.other_projects == \"0\";\n})()\n"
          },
          "label": "End"
        },
        {
          "id": "cb4eab1b2dae440eab78c5272016d936",
          "edgeType": "Edge",
          "source": "4bc63d85a51345ff90694f9508ea2e1e",
          "target": "63c67ec397d745e1a8e2172861bb51bd",
          "sourcePort": "",
          "targetPort": ""
        },
        {
          "id": "6ed88b95933c46b49f41ed400d50aa91",
          "edgeType": "Edge",
          "source": "63c67ec397d745e1a8e2172861bb51bd",
          "target": "3c23e5722f2a4edcba4d6434be67affe",
          "sourcePort": "",
          "targetPort": ""
        },
        {
          "id": "b7a2eda1d32c4fadbd1a62abc4157a8f",
          "edgeType": "Branch",
          "source": "3c23e5722f2a4edcba4d6434be67affe",
          "target": "7c9a5fd1646b42798bf2ad37390366f6",
          "sourcePort": "",
          "targetPort": "",
          "expression": {
            "mode": "script",
            "value": "(function execute() {\n    /* Return true or false to indicate the branch condition's applicability.\n       For example:\n\n       var applies = vaInputs.first_name == 'Bill' ? true : false;\n       return applies;\n    */\n    return vaInputs.search_browse == \"1\";\n})()\n"
          },
          "label": "enter name"
        },
        {
          "id": "426a9894d3ce4e7c82b3c0610bf7f061",
          "edgeType": "Branch",
          "source": "3c23e5722f2a4edcba4d6434be67affe",
          "target": "676354b706ad4912ad78e82b62678e56",
          "sourcePort": "",
          "targetPort": "",
          "expression": {
            "mode": "script",
            "value": "(function execute() {\n    /* Return true or false to indicate the branch condition's applicability.\n       For example:\n\n       var applies = vaInputs.first_name == 'Bill' ? true : false;\n       return applies;\n    */\n    return vaInputs.search_browse == \"0\";\n})()\n"
          },
          "label": "Browse"
        },
        {
          "id": "8491cbb9ff194d81b244f97b14029820",
          "edgeType": "Edge",
          "source": "676354b706ad4912ad78e82b62678e56",
          "target": "a097da6b755e4304900f49c2b5c7ec53",
          "sourcePort": "",
          "targetPort": ""
        },
        {
          "id": "e996035d1c4f4e74bed4c0d487c3a181",
          "edgeType": "Edge",
          "source": "c0619db46d094b089a97c8423546f687",
          "target": "cf586bad18a646eeb0f0bbd0b95daa24",
          "sourcePort": "",
          "targetPort": ""
        },
        {
          "id": "f1abcd4c1a41467f984094fee40da64b",
          "edgeType": "Branch",
          "source": "cf586bad18a646eeb0f0bbd0b95daa24",
          "target": "a097da6b755e4304900f49c2b5c7ec53",
          "sourcePort": "",
          "targetPort": "",
          "expression": {
            "value": "vaInputs.choose_recordISNOTEMPTY",
            "mode": "query"
          },
          "label": "Yes"
        },
        {
          "id": "ee2329d7a7f54785afe380e5a8f21532",
          "edgeType": "Branch",
          "source": "cf586bad18a646eeb0f0bbd0b95daa24",
          "target": "7c9a5fd1646b42798bf2ad37390366f6",
          "sourcePort": "",
          "targetPort": "",
          "expression": {
            "value": "vaInputs.choose_recordISEMPTY",
            "mode": "query"
          },
          "label": "No"
        }
      ]
    }
  },
  "variables": {
    "current-user": {
      "category": "vaInputs",
      "id": "current-user",
      "label": "User",
      "name": "user",
      "table": "sys_user",
      "varType": "reference"
    },
    "e2cb931469b341ce8068f421270a6540": {
      "id": "e2cb931469b341ce8068f421270a6540",
      "name": "choose_record",
      "label": "Choose Record",
      "varType": "reference",
      "table": "x_723119_germanlrn_project",
      "category": "vaInputs"
    },
    "f7b0aae8adbe460680cdc0d1256eed7b": {
      "id": "f7b0aae8adbe460680cdc0d1256eed7b",
      "name": "additional_action",
      "label": "Additional Action",
      "varType": "reference",
      "table": "",
      "category": "vaInputs"
    },
    "984d34d4220f4e048e4dd1dff6c80201": {
      "id": "984d34d4220f4e048e4dd1dff6c80201",
      "name": "other_projects",
      "label": "Other Projects",
      "varType": "reference",
      "table": "",
      "category": "vaInputs"
    },
    "f1802bf9ddb040f2b7e9bf473ba2bb9f": {
      "id": "f1802bf9ddb040f2b7e9bf473ba2bb9f",
      "name": "enter_project_name",
      "label": "Enter Project Name",
      "varType": "string",
      "secure": false,
      "category": "vaInputs",
      "encryptionHashFunction": "SHA-256",
      "encryptionSalt": {
        "value": "MTY0NjA0ODc0MTA3OSBWQSBEZXNpZ25lciBpcyBhd2Vzb21l",
        "mode": "simple"
      }
    },
    "fc887997333b4535900754d857192ca7": {
      "id": "fc887997333b4535900754d857192ca7",
      "name": "search_browse",
      "label": "Search/browse",
      "varType": "reference",
      "table": "",
      "category": "vaInputs"
    },
    "af5e37f66011413eb997cb7b0e2d76e6": {
      "id": "af5e37f66011413eb997cb7b0e2d76e6",
      "name": "browse_projects",
      "label": "Browse Projects",
      "varType": "reference",
      "table": "x_723119_germanlrn_project",
      "category": "vaInputs"
    }
  }
}</graph>
        <key_phrases>Request Project spendings</key_phrases>
        <library>false</library>
        <live_agent>false</live_agent>
        <name>Request Project spendings</name>
        <nlu_intent/>
        <nlu_intent_label/>
        <nlu_model/>
        <nlu_model_label/>
        <nlu_provider/>
        <palette_label/>
        <roles/>
        <source_topic_id/>
        <sys_class_name>sys_cb_topic</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-02-28 10:15:36</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_id>ee1d34082fcac510ee00d5f62799b62d</sys_id>
        <sys_mod_count>32</sys_mod_count>
        <sys_name>Request Project spendings</sys_name>
        <sys_package display_value="German Learning" source="x_723119_germanlrn">612b9ab72f100110ee00d5f62799b622</sys_package>
        <sys_policy/>
        <sys_scope display_value="German Learning">612b9ab72f100110ee00d5f62799b622</sys_scope>
        <sys_update_name>sys_cb_topic_ee1d34082fcac510ee00d5f62799b62d</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-02-28 14:32:25</sys_updated_on>
        <triggerable_by_notification>false</triggerable_by_notification>
        <type>STANDARD</type>
        <variables/>
    </sys_cb_topic>
    <sys_variable_value action="delete_multiple" query="document_key=ee1d34082fcac510ee00d5f62799b62d"/>
</record_update>
